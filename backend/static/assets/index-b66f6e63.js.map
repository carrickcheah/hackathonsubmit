{"version":3,"mappings":"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","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","listUploadedFilesApi","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","enTranslation","esTranslation","frTranslation","jaTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","t","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","isLoading","setIsLoading","localPlayingState","setLocalPlayingState","playAudio","speechUrl","jsxs","Fragment","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","styles","ReactMarkdown","rehypeRaw","remarkGfm","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","useEffect","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","UserChatMessage","message","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","isCalloutVisible","toggleIsCalloutVisible","useBoolean","descriptionId","useId","iconButtonId","Callout","DefaultButton","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","SyntaxHighlighter","ThoughtProcess","thoughts","k","a11yLight","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","UploadFile","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","files","handleRemoveFile","handleUploadFile","e","file","formData","Add24Regular","Label","Text","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onRetrievalModeChange","option","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","Dropdown","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","items","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","LanguagePicker","onLanguageChange","handleLanguageChange","languagePickerId","LocalLanguage24Regular","code","details","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","useRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","audio","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","makeApiRequest","clearChat","onPromptTemplateChange","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","Helmet","streamedAnswer","q","SparkleFilled","newLang","Panel","inputs","options","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","Picture1","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","NavLink","isActive","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/assets/Picture1.jpg","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nconst appServicesAuthTokenUrl = \".auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n    expires_on: string;\n}\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    // Set to true if access control is enforced by the application\n    requireAccessControl: boolean;\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\n    enableUnauthenticatedAccess: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\nexport const requireAccessControl = authSetup.requireAccessControl;\n\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\n\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Cache the app services token if it's available\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\ndeclare global {\n    var cachedAppServicesToken: AppServicesToken | null;\n}\nglobalThis.cachedAppServicesToken = null;\n\n/**\n * Retrieves an access token if the user is logged in using app services authentication.\n * Checks if the current token is expired and fetches a new token if necessary.\n * Returns null if the app doesn't support app services authentication.\n *\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\n */\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\n        const currentDate = new Date();\n        const expiresOnDate = new Date(appServicesToken.expires_on);\n        return expiresOnDate > currentDate;\n    };\n\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\n        return Promise.resolve(globalThis.cachedAppServicesToken);\n    }\n\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\n        return fetch(appServicesAuthTokenUrl).then(r => {\n            if (r.ok) {\n                return r.json().then(json => {\n                    if (json.length > 0) {\n                        return {\n                            id_token: json[0][\"id_token\"] as string,\n                            access_token: json[0][\"access_token\"] as string,\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\n                                acc[item.typ] = item.val;\n                                return acc;\n                            }, {}) as Record<string, any>,\n                            expires_on: json[0][\"expires_on\"] as string\n                        } as AppServicesToken;\n                    }\n\n                    return null;\n                });\n            }\n\n            return null;\n        });\n    };\n\n    return getAppServicesTokenFromMe().then(token => {\n        if (token) {\n            if (checkNotExpired(token)) {\n                globalThis.cachedAppServicesToken = token;\n                return token;\n            }\n\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\n                if (r.ok) {\n                    return getAppServicesTokenFromMe();\n                }\n                return null;\n            });\n        }\n\n        return null;\n    });\n};\n\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\n\n// Sign out of app services\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n/**\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\n */\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\n    if (client) {\n        const activeAccount = client.getActiveAccount();\n        if (activeAccount) {\n            return true;\n        }\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return true;\n    }\n\n    return false;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n\n/**\n * Retrieves the username of the active account.\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\n */\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.username;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken?.user_claims) {\n        return appServicesToken.user_claims.preferred_username;\n    }\n\n    return null;\n};\n\n/**\n * Retrieves the token claims of the active account.\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\n */\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.idTokenClaims;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return appServicesToken.user_claims;\n    }\n\n    return undefined;\n};\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse } from \"./models\";\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\n\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\n    // If using login and not using app services, add the id token of the logged in account as the authorization\n    if (useLogin && !isUsingAppServicesLogin) {\n        if (idToken) {\n            return { Authorization: `Bearer ${idToken}` };\n        }\n    }\n\n    return {};\n}\n\nexport async function configApi(): Promise<Config> {\n    const response = await fetch(`${BACKEND_URI}/config`, {\n        method: \"GET\"\n    });\n\n    return (await response.json()) as Config;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n\n    if (response.status > 299 || !response.ok) {\n        throw Error(`Request failed with status ${response.status}`);\n    }\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (parsedResponse.error) {\n        throw Error(parsedResponse.error);\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\n    let url = `${BACKEND_URI}/chat`;\n    if (shouldStream) {\n        url += \"/stream\";\n    }\n    const headers = await getHeaders(idToken);\n    return await fetch(url, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n}\n\nexport async function getSpeechApi(text: string): Promise<string | null> {\n    return await fetch(\"/speech\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            text: text\n        })\n    })\n        .then(response => {\n            if (response.status == 200) {\n                return response.blob();\n            } else if (response.status == 400) {\n                console.log(\"Speech synthesis is not enabled.\");\n                return null;\n            } else {\n                console.error(\"Unable to get speech synthesis.\");\n                return null;\n            }\n        })\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\n    const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        headers: await getHeaders(idToken),\n        body: request\n    });\n\n    if (!response.ok) {\n        throw new Error(`Uploading files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/delete_uploaded\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ filename })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting file failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\n    const response = await fetch(`/list_uploaded`, {\n        method: \"GET\",\n        headers: await getHeaders(idToken)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Listing files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: string[] = await response.json();\n    return dataResponse;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFieldOptions {\n    Embedding = \"embedding\",\n    ImageEmbedding = \"imageEmbedding\",\n    Both = \"both\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    seed?: number;\n    top?: number;\n    temperature?: number;\n    minimum_search_score?: number;\n    minimum_reranker_score?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFieldOptions[];\n    language: string;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ChatAppResponseOrError = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    session_state: any;\n};\n\nexport type Config = {\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showVectorOption: boolean;\n    showUserUpload: boolean;\n    showLanguagePicker: boolean;\n    showSpeechInput: boolean;\n    showSpeechOutputBrowser: boolean;\n    showSpeechOutputAzure: boolean;\n};\n\nexport type SimpleAPIResponse = {\n    message?: string;\n};\n\nexport interface SpeechConfig {\n    speechUrls: (string | null)[];\n    setSpeechUrls: (urls: (string | null)[]) => void;\n    audio: HTMLAudioElement;\n    isPlaying: boolean;\n    setIsPlaying: (isPlaying: boolean) => void;\n}\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport enTranslation from \"../locales/en/translation.json\";\nimport esTranslation from \"../locales/es/translation.json\";\nimport jaTranslation from \"../locales/ja/translation.json\";\nimport frTranslation from \"../locales/fr/translation.json\";\n\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\n    en: {\n        name: \"English\",\n        locale: \"en-US\"\n    },\n    es: {\n        name: \"Español\",\n        locale: \"es-ES\"\n    },\n    fr: {\n        name: \"Français\",\n        locale: \"fr-FR\"\n    },\n    ja: {\n        name: \"日本語\",\n        locale: \"ja-JP\"\n    }\n};\n\ni18next\n    .use(HttpApi)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources: {\n            en: { translation: enTranslation },\n            es: { translation: esTranslation },\n            fr: { translation: frTranslation },\n            ja: { translation: jaTranslation }\n        },\n        fallbackLng: \"en\",\n        supportedLngs: Object.keys(supportedLngs),\n        debug: import.meta.env.DEV,\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18next;\n","import { useState } from \"react\";\nimport { IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    answer: string;\n}\n\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\n\nlet synth: SpeechSynthesis | null = null;\n\ntry {\n    synth = SpeechSynthesis;\n} catch (err) {\n    console.error(\"SpeechSynthesis is not supported\");\n}\n\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\n    if (synth) {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = lngCode;\n        utterance.volume = 1;\n        utterance.rate = 1;\n        utterance.pitch = 1;\n\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\n        if (!voice) {\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\n        }\n\n        utterance.voice = voice;\n        return utterance;\n    }\n};\n\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\n    const { t, i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n    const startOrStopSpeech = (answer: string) => {\n        if (synth != null) {\n            if (isPlaying) {\n                synth.cancel(); // removes all utterances from the utterance queue.\n                setIsPlaying(false);\n                return;\n            }\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\n\n            if (!utterance) {\n                return;\n            }\n\n            synth.speak(utterance);\n\n            utterance.onstart = () => {\n                setIsPlaying(true);\n                return;\n            };\n\n            utterance.onend = () => {\n                setIsPlaying(false);\n                return;\n            };\n        }\n    };\n    const color = isPlaying ? \"red\" : \"black\";\n\n    return (\n        <IconButton\n            style={{ color: color }}\n            iconProps={{ iconName: \"Volume3\" }}\n            title={t(\"tooltips.speakAnswer\")}\n            ariaLabel={t(\"tooltips.speakAnswer\")}\n            onClick={() => startOrStopSpeech(answer)}\n            disabled={!synth}\n        />\n    );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconButton } from \"@fluentui/react\";\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\n\ninterface Props {\n    answer: string;\n    speechConfig: SpeechConfig;\n    index: number;\n    isStreaming: boolean;\n}\n\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [localPlayingState, setLocalPlayingState] = useState(false);\n    const { t } = useTranslation();\n\n    const playAudio = async (url: string) => {\n        speechConfig.audio.src = url;\n        await speechConfig.audio\n            .play()\n            .then(() => {\n                speechConfig.audio.onended = () => {\n                    speechConfig.setIsPlaying(false);\n                    setLocalPlayingState(false);\n                };\n                speechConfig.setIsPlaying(true);\n                setLocalPlayingState(true);\n            })\n            .catch(() => {\n                alert(\"Failed to play speech output.\");\n                console.error(\"Failed to play speech output.\");\n                speechConfig.setIsPlaying(false);\n                setLocalPlayingState(false);\n            });\n    };\n\n    const startOrStopSpeech = async (answer: string) => {\n        if (speechConfig.isPlaying) {\n            speechConfig.audio.pause();\n            speechConfig.audio.currentTime = 0;\n            speechConfig.setIsPlaying(false);\n            setLocalPlayingState(false);\n            return;\n        }\n        if (speechConfig.speechUrls[index]) {\n            playAudio(speechConfig.speechUrls[index]);\n            return;\n        }\n        setIsLoading(true);\n        await getSpeechApi(answer).then(async speechUrl => {\n            if (!speechUrl) {\n                alert(\"Speech output is not available.\");\n                console.error(\"Speech output is not available.\");\n                return;\n            }\n            setIsLoading(false);\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\n            playAudio(speechUrl);\n        });\n    };\n\n    const color = localPlayingState ? \"red\" : \"black\";\n\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\n    return isLoading ? (\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\n    ) : (\n        <>\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\n            <IconButton\n                style={{ color: color }}\n                iconProps={{ iconName: \"Volume3\" }}\n                title={t(\"tooltips.speakAnswer\")}\n                ariaLabel={t(\"tooltips.speakAnswer\")}\n                onClick={() => startOrStopSpeech(answer)}\n                disabled={isStreaming}\n            />\n        </>\n    );\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport DOMPurify from \"dompurify\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport styles from \"./Answer.module.css\";\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    index: number;\n    speechConfig: SpeechConfig;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n    showSpeechOutputBrowser?: boolean;\n    showSpeechOutputAzure?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    index,\n    speechConfig,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions,\n    showSpeechOutputAzure,\n    showSpeechOutputBrowser\n}: Props) => {\n    const followupQuestions = answer.context?.followup_questions;\n    const messageContent = answer.message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n    const { t } = useTranslation();\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title={t(\"tooltips.showThoughtProcess\")}\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title={t(\"tooltips.showSupportingContent\")}\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.context.data_points}\n                        />\n                        {showSpeechOutputAzure && (\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\n                        )}\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText}>\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\n                </div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const { t, i18n } = useTranslation();\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        {t(\"generatingAnswer\")}\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { SetStateAction, useState } from \"react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Mic28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./QuestionInput.module.css\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    updateQuestion: (question: string) => void;\n}\n\nconst useCustomSpeechRecognition = () => {\n    const { i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    let speechRecognition: {\n        continuous: boolean;\n        lang: string;\n        interimResults: boolean;\n        maxAlternatives: number;\n        start: () => void;\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\n        onend: () => void;\n        onerror: (event: { error: string }) => void;\n        stop: () => void;\n    } | null = null;\n\n    try {\n        speechRecognition = new SpeechRecognition();\n        if (speechRecognition != null) {\n            speechRecognition.lang = lngCode;\n            speechRecognition.interimResults = true;\n        }\n    } catch (err) {\n        console.error(\"SpeechRecognition not supported\");\n        speechRecognition = null;\n    }\n\n    return speechRecognition;\n};\n\nexport const SpeechInput = ({ updateQuestion }: Props) => {\n    let speechRecognition = useCustomSpeechRecognition();\n    const { t } = useTranslation();\n    const [isRecording, setIsRecording] = useState<boolean>(false);\n    const startRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\n            let input = \"\";\n            for (const result of event.results) {\n                input += result[0].transcript;\n            }\n            updateQuestion(input);\n        };\n        speechRecognition.onend = () => {\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\n            setIsRecording(false);\n        };\n        speechRecognition.onerror = (event: { error: string }) => {\n            if (speechRecognition) {\n                speechRecognition.stop();\n                if (event.error == \"no-speech\") {\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\n                } else if (event.error == \"language-not-supported\") {\n                    alert(\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\n                    );\n                } else {\n                    alert(`Speech recognition error detected: ${event.error}.`);\n                }\n            }\n        };\n\n        setIsRecording(true);\n        speechRecognition.start();\n    };\n\n    const stopRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n        speechRecognition.stop();\n        setIsRecording(false);\n    };\n\n    if (speechRecognition == null) {\n        return <></>;\n    }\n    return (\n        <>\n            {!isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\n                    </Tooltip>\n                </div>\n            )}\n            {isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\n                    </Tooltip>\n                </div>\n            )}\n        </>\n    );\n};\n","/**\n * This file defines a context for managing login state in a React application.\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n * For more information, refer to the official React documentation:\n * https://react.dev/learn/passing-data-deeply-with-context\n */\n\nimport { createContext } from \"react\";\n\nexport const LoginContext = createContext({\n    loggedIn: false,\n    setLoggedIn: (_: boolean) => {}\n});\n","import { useState, useEffect, useContext } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./QuestionInput.module.css\";\nimport { SpeechInput } from \"./SpeechInput\";\nimport { LoginContext } from \"../../loginContext\";\nimport { requireLogin } from \"../../authConfig\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n    showSpeechInput?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const [isComposing, setIsComposing] = useState(false);\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (isComposing) return;\n\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const handleCompositionStart = () => {\n        setIsComposing(true);\n    };\n    const handleCompositionEnd = () => {\n        setIsComposing(false);\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\n    const sendQuestionDisabled = disabled || !question.trim() || requireLogin;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n                onCompositionStart={handleCompositionStart}\n                onCompositionEnd={handleCompositionEnd}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Example.module.css\";\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    const { t } = useTranslation();\n\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\n\n    return (\n        <ul className={styles.examplesNavList}>\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nconst stackTokens: IStackTokens = {\n    childrenGap: 4,\n    maxWidth: 300\n};\n\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\nconst iconProps = { iconName: \"Info\" };\n\ninterface IHelpCalloutProps {\n    label: string | undefined;\n    labelId: string;\n    fieldId: string | undefined;\n    helpText: string;\n}\n\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\n    const descriptionId: string = useId(\"description\");\n    const iconButtonId: string = useId(\"iconButton\");\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\n                <label id={props.labelId} htmlFor={props.fieldId}>\n                    {props.label}\n                </label>\n                <IconButton\n                    id={iconButtonId}\n                    iconProps={iconProps}\n                    title={t(\"tooltips.info\")}\n                    ariaLabel={t(\"tooltips.info\")}\n                    onClick={toggleIsCalloutVisible}\n                    styles={iconButtonStyles}\n                />\n            </Stack>\n            {isCalloutVisible && (\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\n                        <span id={descriptionId}>{props.helpText}</span>\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\n                    </Stack>\n                </Callout>\n            )}\n        </>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map((c, ind) => {\n                const parsed = parseSupportingContentItem(c);\n                return (\n                    <li className={styles.supportingContentItem} key={ind}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\n                    </li>\n                );\n            })}\n            {imageItems?.map((img, ind) => {\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props) || []).map((k: any) => (\n                                    <span className={styles.tProp}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nimport styles from \"./MarkdownViewer.module.css\";\n\ninterface MarkdownViewerProps {\n    src: string;\n}\n\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\n    const [content, setContent] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<Error | null>(null);\n    const { t } = useTranslation();\n\n    /**\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\n     * This function removes them from the markdown.\n     */\n    const removeAnchorLinks = (markdown: string) => {\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\n        return markdown.replace(ancorLinksRegex, \"\");\n    };\n\n    useEffect(() => {\n        const fetchMarkdown = async () => {\n            try {\n                const response = await fetch(src);\n\n                if (!response.ok) {\n                    throw new Error(\"Failed loading markdown file.\");\n                }\n\n                let markdownText = await response.text();\n                markdownText = removeAnchorLinks(markdownText);\n                setContent(markdownText);\n            } catch (error: any) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMarkdown();\n    }, [src]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\n                </div>\n            ) : error ? (\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\n                        {error.message}\n                        <Link href={src} download>\n                            Download the file\n                        </Link>\n                    </MessageBar>\n                </div>\n            ) : (\n                <div>\n                    <IconButton\n                        className={styles.downloadButton}\n                        style={{ color: \"black\" }}\n                        iconProps={{ iconName: \"Save\" }}\n                        title={t(\"tooltips.save\")}\n                        ariaLabel={t(\"tooltips.save\")}\n                        href={src}\n                        download\n                    />\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { getHeaders } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { t } = useTranslation();\n\n    const fetchCitation = async () => {\n        const token = client ? await getToken(client) : undefined;\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\",\n                headers: await getHeaders(token)\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText={t(\"headerTexts.thoughtProcess\")}\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText={t(\"headerTexts.supportingContent\")}\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText={t(\"headerTexts.citation\")}\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {renderFileViewer()}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {t(\"developerSettings\")}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    const { t, i18n } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"clearChat\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { useState, ChangeEvent } from \"react\";\nimport { Callout, Label, Text } from \"@fluentui/react\";\nimport { Button } from \"@fluentui/react-components\";\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport styles from \"./UploadFile.module.css\";\n\ninterface Props {\n    className?: string;\n    disabled?: boolean;\n}\n\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\n    // State variables to manage the component behavior\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\n    const [isUploading, setIsUploading] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n    const { t } = useTranslation();\n\n    if (!useLogin) {\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\n    }\n\n    const client = useMsal().instance;\n\n    // Handler for the \"Manage file uploads\" button\n    const handleButtonClick = async () => {\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\n\n        // Update uploaded files by calling the API\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsLoading(false);\n        }\n    };\n\n    const listUploadedFiles = async (idToken: string) => {\n        listUploadedFilesApi(idToken).then(files => {\n            setIsLoading(false);\n            setDeletionStatus({});\n            setUploadedFiles(files);\n        });\n    };\n\n    const handleRemoveFile = async (filename: string) => {\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n\n            await deleteUploadedFileApi(filename, idToken);\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\n            listUploadedFiles(idToken);\n        } catch (error) {\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\n            console.error(error);\n        }\n    };\n\n    // Handler for the form submission (file upload)\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        if (!e.target.files || e.target.files.length === 0) {\n            return;\n        }\n        setIsUploading(true); // Start the loading state\n        const file: File = e.target.files[0];\n        const formData = new FormData();\n        formData.append(\"file\", file);\n\n        try {\n            const idToken = await getToken(client);\n            if (!idToken) {\n                throw new Error(\"No authentication token available\");\n            }\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\n            setUploadedFile(response);\n            setIsUploading(false);\n            setUploadedFileError(undefined);\n            listUploadedFiles(idToken);\n        } catch (error) {\n            console.error(error);\n            setIsUploading(false);\n            setUploadedFileError(t(\"upload.uploadedFileError\"));\n        }\n    };\n\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <div>\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\n                    {t(\"upload.manageFileUploads\")}\n                </Button>\n\n                {isCalloutVisible && (\n                    <Callout\n                        role=\"dialog\"\n                        gapSpace={0}\n                        className={styles.callout}\n                        target=\"#calloutButton\"\n                        onDismiss={() => setIsCalloutVisible(false)}\n                        setInitialFocus\n                    >\n                        <form encType=\"multipart/form-data\">\n                            <div>\n                                <Label>{t(\"upload.fileLabel\")}</Label>\n                                <input\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\n                                    className={styles.chooseFiles}\n                                    type=\"file\"\n                                    onChange={handleUploadFile}\n                                />\n                            </div>\n                        </form>\n\n                        {/* Show a loading message while files are being uploaded */}\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\n\n                        {/* Display the list of already uploaded */}\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\n\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\n                        {uploadedFiles.map((filename, index) => {\n                            return (\n                                <div key={index} className={styles.list}>\n                                    <div className={styles.item}>{filename}</div>\n                                    {/* Button to remove a file from the list */}\n                                    <Button\n                                        icon={<Delete24Regular />}\n                                        onClick={() => handleRemoveFile(filename)}\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\n                                    >\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\n                                    </Button>\n                                </div>\n                            );\n                        })}\n                    </Callout>\n                )}\n            </div>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\n\ninterface Props {\n    showImageOptions?: boolean;\n    defaultRetrievalMode: RetrievalMode;\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setVectorFieldOption(option?.key as VectorFieldOptions);\n        updateVectorFields([option?.key as VectorFieldOptions]);\n    };\n\n    useEffect(() => {\n        showImageOptions\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\n            : updateVectorFields([VectorFieldOptions.Embedding]);\n    }, [showImageOptions]);\n\n    const retrievalModeId = useId(\"retrievalMode\");\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\n    const vectorFieldsId = useId(\"vectorFields\");\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                id={retrievalModeFieldId}\n                label={t(\"labels.retrievalMode.label\")}\n                selectedKey={defaultRetrievalMode.toString()}\n                options={[\n                    {\n                        key: \"hybrid\",\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\n                        selected: retrievalMode == RetrievalMode.Hybrid,\n                        data: RetrievalMode.Hybrid\n                    },\n                    {\n                        key: \"vectors\",\n                        text: t(\"labels.retrievalMode.options.vectors\"),\n                        selected: retrievalMode == RetrievalMode.Vectors,\n                        data: RetrievalMode.Vectors\n                    },\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n                aria-labelledby={retrievalModeId}\n                onRenderLabel={(props: IDropdownProps | undefined) => (\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\n                )}\n            />\n\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\n                <Dropdown\n                    id={vectorFieldsFieldId}\n                    label={t(\"labels.vector.label\")}\n                    options={[\n                        {\n                            key: VectorFieldOptions.Embedding,\n                            text: t(\"labels.vector.options.embedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.Embedding\n                        },\n                        {\n                            key: VectorFieldOptions.ImageEmbedding,\n                            text: t(\"labels.vector.options.imageEmbedding\"),\n                            selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding\n                        },\n                        { key: VectorFieldOptions.Both, text: t(\"labels.vector.options.both\"), selected: vectorFieldOption === VectorFieldOptions.Both }\n                    ]}\n                    onChange={onVectorFieldsChange}\n                    aria-labelledby={vectorFieldsId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { Label } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from \"@fluentui/react-table\";\nimport { getTokenClaims } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ntype Claim = {\n    name: string;\n    value: string;\n};\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\n\n    useEffect(() => {\n        const fetchClaims = async () => {\n            setClaims(await getTokenClaims(instance));\n        };\n\n        fetchClaims();\n    }, []);\n\n    const ToString = (a: string | any) => {\n        if (typeof a === \"string\") {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    let createClaims = (o: Record<string, unknown> | undefined) => {\n        return Object.keys(o ?? {}).map((key: string) => {\n            let originalKey = key;\n            try {\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\n                const url = new URL(key);\n                const parts = url.pathname.split(\"/\");\n                key = parts[parts.length - 1];\n            } catch (error) {\n                // Do not parse key if it's not a URL\n            }\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\n        });\n    };\n    const items: Claim[] = createClaims(claims);\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: \"name\",\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return \"Name\";\n            },\n            renderCell: item => {\n                return item.name;\n            }\n        }),\n        createTableColumn<Claim>({\n            columnId: \"value\",\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return \"Value\";\n            },\n            renderCell: item => {\n                return item.value;\n            }\n        })\n    ];\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\n                <DataGridHeader>\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./GPT4VSettings.module.css\";\nimport { GPT4VInput } from \"../../api\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\n\ninterface Props {\n    gpt4vInputs: GPT4VInput;\n    isUseGPT4V: boolean;\n    updateGPT4VInputs: (input: GPT4VInput) => void;\n    updateUseGPT4V: (useGPT4V: boolean) => void;\n}\n\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\n\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        updateUseGPT4V(!!checked);\n        setUseGPT4V(!!checked);\n    };\n\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\n        if (option) {\n            const data = option.key as GPT4VInput;\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\n            data && setVectorFieldOption(data);\n        }\n    };\n\n    useEffect(() => {\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\n    }, [useGPT4V]);\n\n    const useGPT4VId = useId(\"useGPT4V\");\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\n    const gpt4VInputId = useId(\"gpt4VInput\");\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\n    const { t } = useTranslation();\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Checkbox\n                id={useGPT4VFieldId}\n                checked={useGPT4V}\n                label={t(\"labels.useGPT4V\")}\n                onChange={onuseGPT4V}\n                aria-labelledby={useGPT4VId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\n                )}\n            />\n            {useGPT4V && (\n                <Dropdown\n                    id={gpt4VInputFieldId}\n                    selectedKey={vectorFieldOption}\n                    label={t(\"labels.gpt4VInput.label\")}\n                    options={[\n                        {\n                            key: GPT4VInput.TextAndImages,\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\n                        },\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\n                    ]}\n                    required\n                    onChange={onSetGPT4VInput}\n                    aria-labelledby={gpt4VInputId}\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\n                    )}\n                />\n            )}\n        </Stack>\n    );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\n\nimport { supportedLngs } from \"./config\";\nimport styles from \"./LanguagePicker.module.css\";\n\ninterface Props {\n    onLanguageChange: (language: string) => void;\n}\n\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\n    const { i18n } = useTranslation();\n\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\n        onLanguageChange(option?.data || i18n.language);\n    };\n    const languagePickerId = useId(\"languagePicker\");\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.languagePicker}>\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\n            <Dropdown\n                id={languagePickerId}\n                selectedKey={i18n.language}\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\n                    key: code,\n                    text: details.name,\n                    selected: code === i18n.language,\n                    data: code\n                }))}\n                onChange={handleLanguageChange}\n                ariaLabel={t(\"labels.languagePicker\")}\n            />\n        </div>\n    );\n};\n","import { useRef, useState, useEffect, useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Checkbox, Panel, DefaultButton, TextField, ITextFieldProps, ICheckboxProps } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFieldOptions,\n    GPT4VInput,\n    SpeechConfig\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n        });\n    };\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        message: { content: answer, role: askResponse.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\n                    event[\"message\"] = event[\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"delta\"][\"content\"]);\n                } else if (event[\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            message: { content: answer, role: askResponse.message.role }\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\n            };\n\n            const response = await chatApi(request, shouldStream, token);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (response.status > 299 || !response.ok) {\n                throw Error(`Request failed with status ${response.status}`);\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (parsedResponse.error) {\n                    throw Error(parsedResponse.error);\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            }\n            setSpeechUrls([...speechUrls, null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setSpeechUrls([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setTemperature(parseFloat(newValue || \"0\"));\n    };\n\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setSeed(parseInt(newValue || \"\"));\n    };\n\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\n    };\n\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    // IDs for form labels and their associated callouts\n    const promptTemplateId = useId(\"promptTemplate\");\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\n    const temperatureId = useId(\"temperature\");\n    const temperatureFieldId = useId(\"temperatureField\");\n    const seedId = useId(\"seed\");\n    const seedFieldId = useId(\"seedField\");\n    const searchScoreId = useId(\"searchScore\");\n    const searchScoreFieldId = useId(\"searchScoreField\");\n    const rerankerScoreId = useId(\"rerankerScore\");\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\n    const retrieveCountId = useId(\"retrieveCount\");\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\n    const excludeCategoryId = useId(\"excludeCategory\");\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\n    const semanticRankerId = useId(\"semanticRanker\");\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\n    const semanticCaptionsId = useId(\"semanticCaptions\");\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\n    const shouldStreamId = useId(\"shouldStream\");\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\n    const { t, i18n } = useTranslation();\n\n    return (\n        <div className={styles.container}>\n            {/* Setting the page title using react-helmet-async */}\n            <Helmet>\n                <title>{t(\"pageTitle\")}</title>\n            </Helmet>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>{t(\"chatEmptyStateTitle\")}</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h2>\n                            {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\n\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                index={index}\n                                                speechConfig={speechConfig}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                index={index}\n                                                speechConfig={speechConfig}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                                showSpeechOutputAzure={showSpeechOutputAzure}\n                                                showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder={t(\"defaultExamples.placeholder\")}\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                            showSpeechInput={showSpeechInput}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText={t(\"labels.headerText\")}\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel={t(\"labels.closeButton\")}\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        id={promptTemplateFieldId}\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label={t(\"labels.promptTemplate\")}\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                        aria-labelledby={promptTemplateId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout\n                                labelId={promptTemplateId}\n                                fieldId={promptTemplateFieldId}\n                                helpText={t(\"helpTexts.promptTemplate\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n\n                    <TextField\n                        id={temperatureFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label={t(\"labels.temperature\")}\n                        type=\"number\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        defaultValue={temperature.toString()}\n                        onChange={onTemperatureChange}\n                        aria-labelledby={temperatureId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={t(\"helpTexts.temperature\")} label={props?.label} />\n                        )}\n                    />\n\n                    <TextField\n                        id={seedFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label={t(\"labels.seed\")}\n                        type=\"text\"\n                        defaultValue={seed?.toString() || \"\"}\n                        onChange={onSeedChange}\n                        aria-labelledby={seedId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={t(\"helpTexts.seed\")} label={props?.label} />\n                        )}\n                    />\n\n                    <TextField\n                        id={searchScoreFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label={t(\"labels.minimumSearchScore\")}\n                        type=\"number\"\n                        min={0}\n                        step={0.01}\n                        defaultValue={minimumSearchScore.toString()}\n                        onChange={onMinimumSearchScoreChange}\n                        aria-labelledby={searchScoreId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={t(\"helpTexts.searchScore\")} label={props?.label} />\n                        )}\n                    />\n\n                    {showSemanticRankerOption && (\n                        <TextField\n                            id={rerankerScoreFieldId}\n                            className={styles.chatSettingsSeparator}\n                            label={t(\"labels.minimumRerankerScore\")}\n                            type=\"number\"\n                            min={1}\n                            max={4}\n                            step={0.1}\n                            defaultValue={minimumRerankerScore.toString()}\n                            onChange={onMinimumRerankerScoreChange}\n                            aria-labelledby={rerankerScoreId}\n                            onRenderLabel={(props: ITextFieldProps | undefined) => (\n                                <HelpCallout\n                                    labelId={rerankerScoreId}\n                                    fieldId={rerankerScoreFieldId}\n                                    helpText={t(\"helpTexts.rerankerScore\")}\n                                    label={props?.label}\n                                />\n                            )}\n                        />\n                    )}\n\n                    <TextField\n                        id={retrieveCountFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label={t(\"labels.retrieveCount\")}\n                        type=\"number\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                        aria-labelledby={retrieveCountId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout\n                                labelId={retrieveCountId}\n                                fieldId={retrieveCountFieldId}\n                                helpText={t(\"helpTexts.retrieveNumber\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n\n                    <TextField\n                        id={excludeCategoryFieldId}\n                        className={styles.chatSettingsSeparator}\n                        label={t(\"labels.excludeCategory\")}\n                        defaultValue={excludeCategory}\n                        onChange={onExcludeCategoryChanged}\n                        aria-labelledby={excludeCategoryId}\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\n                            <HelpCallout\n                                labelId={excludeCategoryId}\n                                fieldId={excludeCategoryFieldId}\n                                helpText={t(\"helpTexts.excludeCategory\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n\n                    {showSemanticRankerOption && (\n                        <>\n                            <Checkbox\n                                id={semanticRankerFieldId}\n                                className={styles.chatSettingsSeparator}\n                                checked={useSemanticRanker}\n                                label={t(\"labels.useSemanticRanker\")}\n                                onChange={onUseSemanticRankerChange}\n                                aria-labelledby={semanticRankerId}\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                    <HelpCallout\n                                        labelId={semanticRankerId}\n                                        fieldId={semanticRankerFieldId}\n                                        helpText={t(\"helpTexts.useSemanticReranker\")}\n                                        label={props?.label}\n                                    />\n                                )}\n                            />\n\n                            <Checkbox\n                                id={semanticCaptionsFieldId}\n                                className={styles.chatSettingsSeparator}\n                                checked={useSemanticCaptions}\n                                label={t(\"labels.useSemanticCaptions\")}\n                                onChange={onUseSemanticCaptionsChange}\n                                disabled={!useSemanticRanker}\n                                aria-labelledby={semanticCaptionsId}\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                    <HelpCallout\n                                        labelId={semanticCaptionsId}\n                                        fieldId={semanticCaptionsFieldId}\n                                        helpText={t(\"helpTexts.useSemanticCaptions\")}\n                                        label={props?.label}\n                                    />\n                                )}\n                            />\n                        </>\n                    )}\n\n                    <Checkbox\n                        id={suggestFollowupQuestionsFieldId}\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label={t(\"labels.useSuggestFollowupQuestions\")}\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                        aria-labelledby={suggestFollowupQuestionsId}\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\n                            <HelpCallout\n                                labelId={suggestFollowupQuestionsId}\n                                fieldId={suggestFollowupQuestionsFieldId}\n                                helpText={t(\"helpTexts.suggestFollowupQuestions\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n\n                    {showGPT4VOptions && (\n                        <GPT4VSettings\n                            gpt4vInputs={gpt4vInput}\n                            isUseGPT4V={useGPT4V}\n                            updateUseGPT4V={useGPT4V => {\n                                setUseGPT4V(useGPT4V);\n                            }}\n                            updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\n                        />\n                    )}\n\n                    {showVectorOption && (\n                        <VectorSettings\n                            defaultRetrievalMode={retrievalMode}\n                            showImageOptions={useGPT4V && showGPT4VOptions}\n                            updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                            updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                        />\n                    )}\n\n                    {useLogin && (\n                        <>\n                            <Checkbox\n                                id={useOidSecurityFilterFieldId}\n                                className={styles.chatSettingsSeparator}\n                                checked={useOidSecurityFilter || requireAccessControl}\n                                label={t(\"labels.useOidSecurityFilter\")}\n                                disabled={!loggedIn || requireAccessControl}\n                                onChange={onUseOidSecurityFilterChange}\n                                aria-labelledby={useOidSecurityFilterId}\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                    <HelpCallout\n                                        labelId={useOidSecurityFilterId}\n                                        fieldId={useOidSecurityFilterFieldId}\n                                        helpText={t(\"helpTexts.useOidSecurityFilter\")}\n                                        label={props?.label}\n                                    />\n                                )}\n                            />\n                            <Checkbox\n                                id={useGroupsSecurityFilterFieldId}\n                                className={styles.chatSettingsSeparator}\n                                checked={useGroupsSecurityFilter || requireAccessControl}\n                                label={t(\"labels.useGroupsSecurityFilter\")}\n                                disabled={!loggedIn || requireAccessControl}\n                                onChange={onUseGroupsSecurityFilterChange}\n                                aria-labelledby={useGroupsSecurityFilterId}\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                                    <HelpCallout\n                                        labelId={useGroupsSecurityFilterId}\n                                        fieldId={useGroupsSecurityFilterFieldId}\n                                        helpText={t(\"helpTexts.useGroupsSecurityFilter\")}\n                                        label={props?.label}\n                                    />\n                                )}\n                            />\n                        </>\n                    )}\n\n                    <Checkbox\n                        id={shouldStreamFieldId}\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label={t(\"labels.shouldStream\")}\n                        onChange={onShouldStreamChange}\n                        aria-labelledby={shouldStreamId}\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\n                            <HelpCallout labelId={shouldStreamId} fieldId={shouldStreamFieldId} helpText={t(\"helpTexts.streamChat\")} label={props?.label} />\n                        )}\n                    />\n\n                    {useLogin && <TokenClaimsDisplay />}\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { LoginContext } from \"../../loginContext\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\n    const activeAccount = instance.getActiveAccount();\n    const [username, setUsername] = useState(\"\");\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        const fetchUsername = async () => {\n            setUsername((await getUsername(instance)) ?? \"\");\n        };\n\n        fetchUsername();\n    }, []);\n\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error))\n            .then(async () => {\n                setLoggedIn(await checkLoggedIn(instance));\n                setUsername((await getUsername(instance)) ?? \"\");\n            });\n    };\n    const handleLogoutPopup = () => {\n        if (activeAccount) {\n            instance\n                .logoutPopup({\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                    account: instance.getActiveAccount()\n                })\n                .catch(error => console.log(error))\n                .then(async () => {\n                    setLoggedIn(await checkLoggedIn(instance));\n                    setUsername((await getUsername(instance)) ?? \"\");\n                });\n        } else {\n            appServicesLogout();\n        }\n    };\n    return (\n        <DefaultButton\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\n            className={styles.loginButton}\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\n        ></DefaultButton>\n    );\n};\n","export default \"__VITE_ASSET__d6fd8945__\"","import React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\nimport { IconButton } from \"@fluentui/react\";\n\n// Import the image\nimport Picture1 from \"../../assets/Picture1.jpg\";\n\nconst Layout = () => {\n    const { t } = useTranslation();\n    const [menuOpen, setMenuOpen] = useState(false);\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n            setMenuOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        if (menuOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [menuOpen]);\n\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer} ref={menuRef}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        {/* Added the image here */}\n                        <img src={Picture1} alt=\"Logo\" className={styles.headerLogo} />\n                        <h3 className={styles.headerTitle}>{t(\"headerTitle\")}</h3>\n                    </Link>\n                    <nav>\n                        <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\n                            <li>\n                                <NavLink\n                                    to=\"/\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"chat\")}\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink\n                                    to=\"/qa\"\n                                    className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\n                                    onClick={() => setMenuOpen(false)}\n                                >\n                                    {t(\"qa\")}\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                    <div className={styles.loginMenuContainer}>\n                        {useLogin && <LoginButton />}\n                        <IconButton\n                            iconProps={{ iconName: \"GlobalNavButton\" }}\n                            className={styles.menuToggle}\n                            onClick={toggleMenu}\n                            ariaLabel={t(\"labels.toggleMenu\")}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\nimport { useEffect, useState } from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { LoginContext } from \"./loginContext\";\nimport Layout from \"./pages/layout/Layout\";\n\nconst LayoutWrapper = () => {\n    const [loggedIn, setLoggedIn] = useState(false);\n    if (useLogin) {\n        var msalInstance = new PublicClientApplication(msalConfig);\n\n        // Default to using the first account if no account is active on page load\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n        }\n\n        // Listen for sign-in event and set active account\n        msalInstance.addEventCallback(event => {\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n                const account = event.payload as AccountInfo;\n                msalInstance.setActiveAccount(account);\n            }\n        });\n\n        useEffect(() => {\n            const fetchLoggedIn = async () => {\n                setLoggedIn(await checkLoggedIn(msalInstance));\n            };\n\n            fetchLoggedIn();\n        }, []);\n\n        return (\n            <MsalProvider instance={msalInstance}>\n                <LoginContext.Provider\n                    value={{\n                        loggedIn,\n                        setLoggedIn\n                    }}\n                >\n                    <Layout />\n                </LoginContext.Provider>\n            </MsalProvider>\n        );\n    } else {\n        return (\n            <LoginContext.Provider\n                value={{\n                    loggedIn,\n                    setLoggedIn\n                }}\n            >\n                <Layout />\n            </LoginContext.Provider>\n        );\n    }\n};\n\nexport default LayoutWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Chat from \"./pages/chat/Chat\";\nimport LayoutWrapper from \"./layoutWrapper\";\nimport i18next from \"./i18n/config\";\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: <LayoutWrapper />,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/ask/Ask\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <I18nextProvider i18n={i18next}>\n            <HelmetProvider>\n                <RouterProvider router={router} />\n            </HelmetProvider>\n        </I18nextProvider>\n    </React.StrictMode>\n);\n"],"file":"assets/index-b66f6e63.js"}